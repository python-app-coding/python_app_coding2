# coding: utf8

"""
（1）使用切片参数缺省值。
切片中，三个参数都可以使用省略方式，使用缺省值。开始位置start的缺省值为开始位置0。缺省步长step为1。结束位置end缺省值为系统容许的最大长度（sys.maxsize），所以切片一般包含序列最后一个元素。

>>> x = [0, 1, 2, 3, 4, 5]

# 省略所有参数，得到原序列
>>> x[::]
[0, 1, 2, 3, 4, 5]

# 省略步长step，使用缺省值1
>>> x[0:3]		# 返回序号为0、1、2的元素列表，不包括序号3对应的元素！
[0, 1, 2]

# 省略结束位置end和步长step
>>> x[2:]		# 返回序号大于等于2的元素列表，包括序号2对应的元素！
[2, 3, 4, 5]

# 省略开始位置start
>>> x[:3]		# 返回序号小于3的元素列表，，不包括序号3对应的元素！
[0, 1, 2]

# 省略结束位置end
>>> x[0::2]		# 从元素0开始，每前进2个元素提取一个元素
[0, 2, 4]

# 省略开始位置start和结束位置end
>>> x[::2]
[0, 2, 4]

（2）负方向切片。
使用负数作为步长，可以实现从尾部开始对序列进行切片，产生序列的倒序子序列。但需要注意，次数对位置的计算是从某个序号开始，按照负数位置好进行判断的。

>>> x[::-1]		    # 这种语法形式返回原列表的倒序列表，等同于x[4::-1]或x[-1::-1]
[5, 4, 3, 2, 1, 0]

>>> x[4:0:-1]		# 返回原列表的倒序列表，但不包含序号0的元素！
[4, 3, 2, 1]

>>> x[4:-1:-1]		# 结束位置使用-1，-1对应的位置为序列最后一个元素，所以切片为空序列
[]

>>> x[4:-3:-1]		# -2对应的位置为倒数第2个元素，所以可以切片到位置4的元素
[4]

>>> x[-1:-7:-1]		# -7小于序列开始位置-6，所以可以切片到整个序列
[5, 4, 3, 2, 1, 0]

>>> x[-2:-5:-1]		# 设置从倒数第2个元素开始切片
[4, 3, 2]

（2）使用切片修改序列。
切片结果是对原序列元素的引用，对于可修改序列，可以使用切片方式进行元素的重新赋值。使用切片赋值时，给出的赋值序列必须与切片序列长度相等。

>>> x[::2] = 2, 4, 6		    # 相应切片位置重新赋值
>>> x
[2, 1, 4, 3, 6, 5]

>>> x[::-2] = 10, 20, 30		# 按照倒序切片赋值
>>> x
[2, 30, 4, 20, 6, 10]
"""