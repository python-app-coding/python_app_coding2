# coding: utf8

"""
（1）函数参数传递不可变对象
函数接收两个变量，交换两个参数对象的值：
>>> def swap_value(x, y):
...     x, y = y, x
...     print('x=', x, 'y=', y)

函数的执行情况：
>>> a, b = 100, 200	# 外部变量
>>> swap_value(a, b)	# 传递给函数, 在函数内部，两个变量的值发生了变化
x= 200 y= 100
>>> print(a, b)	# 外部变量并没有发生变化，说明传递参数的过程进行了复制，而不是引用
100 200

（2）函数参数传递可变对象
具有修改可变对象内容的两个函数：
# 交换两个列表的第一个元素
>>> def swap_list(x, y):
...    x[0], y[0] = y[0], x[0]

# 修改字段，增加一个键值
>>> def modify_dict(x):
...    x['new'] = 200

函数的执行情况：
# 向函数传递列表对象
>>> a, b = [100], [200]	    # 外部变量
>>> swap_list(a, b)	        # 传递给函数
>>> print(a, b)	            # 两个列表的元素被交换
[200] [100]

# 向函数传递字典对象
>>> d = {'old': 100}	# 外部变量
>>> modify_dict(d)	# 传递给函数
>>> d		# 字典增加了键值
{'old': 100, 'new': 200}

（3）参数传递中的对象标识和值的变化
>>> a = 1000
>>> b = [1, 2, 3]

>>> def test_trans(x, y):
...     print("id(x)=", id(x))		# 参数的标识
...     print("id(y)=", id(y))
...     y[0] = 1000		# 改变参数y的元素值

>>> print("id(a)=", id(a), "id(b)=", id(b))	# 传递对象的标识
id(a)= 1411095161904 id(b)= 1411095086336
>>> test_trans(a, b)			# 在函数内参数的标识
id(x)= 1411095161904
id(y)= 1411095086336
>>> print("b = ", b)			# 函数内部操作改变了引用的可变类型变量
b =  [1000, 2, 3]
"""